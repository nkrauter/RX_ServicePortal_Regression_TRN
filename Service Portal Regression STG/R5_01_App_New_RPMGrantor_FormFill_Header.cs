///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Service_Portal_Regression_STG
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The R5_01_App_New_RPMGrantor_FormFill_Header recording.
    /// </summary>
    [TestModule("903d307c-6e20-47f2-9580-c8f50aa73a16", ModuleType.Recording, 1)]
    public partial class R5_01_App_New_RPMGrantor_FormFill_Header : ITestModule
    {
        /// <summary>
        /// Holds an instance of the Service_Portal_Regression_STGRepository repository.
        /// </summary>
        public static Service_Portal_Regression_STGRepository repo = Service_Portal_Regression_STGRepository.Instance;

        static R5_01_App_New_RPMGrantor_FormFill_Header instance = new R5_01_App_New_RPMGrantor_FormFill_Header();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public R5_01_App_New_RPMGrantor_FormFill_Header()
        {
            Score = "100";
            US_Share_of_Cost = "600";
            Recipient_Share_of_Cost = "321";
            Proposal_Type = "Assistance Single Year";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static R5_01_App_New_RPMGrantor_FormFill_Header Instance
        {
            get { return instance; }
        }

#region Variables

        string _Score;

        /// <summary>
        /// Gets or sets the value of variable Score.
        /// </summary>
        [TestVariable("241e7944-eaee-4035-b132-bca68ba46f45")]
        public string Score
        {
            get { return _Score; }
            set { _Score = value; }
        }

        string _US_Share_of_Cost;

        /// <summary>
        /// Gets or sets the value of variable US_Share_of_Cost.
        /// </summary>
        [TestVariable("c5bfb9bf-7e46-4fcd-94a3-97142fbe2165")]
        public string US_Share_of_Cost
        {
            get { return _US_Share_of_Cost; }
            set { _US_Share_of_Cost = value; }
        }

        string _Recipient_Share_of_Cost;

        /// <summary>
        /// Gets or sets the value of variable Recipient_Share_of_Cost.
        /// </summary>
        [TestVariable("9063136e-212c-44e0-ad04-6c8f798a711c")]
        public string Recipient_Share_of_Cost
        {
            get { return _Recipient_Share_of_Cost; }
            set { _Recipient_Share_of_Cost = value; }
        }

        string _Proposal_Type;

        /// <summary>
        /// Gets or sets the value of variable Proposal_Type.
        /// </summary>
        [TestVariable("c5c9a030-5e93-432b-8a44-d7370fdd1328")]
        public string Proposal_Type
        {
            get { return _Proposal_Type; }
            set { _Proposal_Type = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 30;
            Delay.SpeedFactor = 1.00;

            Init();

            // Score
            Report.Log(ReportLevel.Info, "Section", "Score", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Login1.SpFormfieldUScoreString' at 376;29.", repo.Login1.SpFormfieldUScoreStringInfo, new RecordItemIndex(1));
            repo.Login1.SpFormfieldUScoreString.Click("376;29");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Score' with focus on 'Login1.SpFormfieldUScoreString'.", repo.Login1.SpFormfieldUScoreStringInfo, new RecordItemIndex(2));
            repo.Login1.SpFormfieldUScoreString.PressKeys(Score);
            Delay.Milliseconds(30);
            
            // Recommended U.S. Share of Cost
            Report.Log(ReportLevel.Info, "Section", "Recommended U.S. Share of Cost", new RecordItemIndex(3));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Login1.UUsShareOfCost' at 506;24.", repo.Login1.UUsShareOfCostInfo, new RecordItemIndex(4));
            repo.Login1.UUsShareOfCost.Click("506;24");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'Login1.UUsShareOfCost'.", repo.Login1.UUsShareOfCostInfo, new RecordItemIndex(5));
            Keyboard.PrepareFocus(repo.Login1.UUsShareOfCost);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$US_Share_of_Cost' with focus on 'Login1.UUsShareOfCost'.", repo.Login1.UUsShareOfCostInfo, new RecordItemIndex(6));
            repo.Login1.UUsShareOfCost.PressKeys(US_Share_of_Cost);
            Delay.Milliseconds(30);
            
            // Recommended Recipient Share of Cost
            Report.Log(ReportLevel.Info, "Section", "Recommended Recipient Share of Cost", new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Login1.SpFormfieldURecipientShareOfCost' at 364;21.", repo.Login1.SpFormfieldURecipientShareOfCostInfo, new RecordItemIndex(8));
            repo.Login1.SpFormfieldURecipientShareOfCost.Click("364;21");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'Login1.SpFormfieldURecipientShareOfCost'.", repo.Login1.SpFormfieldURecipientShareOfCostInfo, new RecordItemIndex(9));
            Keyboard.PrepareFocus(repo.Login1.SpFormfieldURecipientShareOfCost);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Recipient_Share_of_Cost' with focus on 'Login1.SpFormfieldURecipientShareOfCost'.", repo.Login1.SpFormfieldURecipientShareOfCostInfo, new RecordItemIndex(10));
            repo.Login1.SpFormfieldURecipientShareOfCost.PressKeys(Recipient_Share_of_Cost);
            Delay.Milliseconds(30);
            
            // Proposal Type
            Report.Log(ReportLevel.Info, "Section", "Proposal Type", new RecordItemIndex(11));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LShiftKey down}{Tab}{Tab}{Tab}{Tab}{Tab}{LShiftKey up}' with focus on 'Login1'.", repo.Login1.SelfInfo, new RecordItemIndex(12));
            repo.Login1.Self.EnsureVisible();
            Keyboard.Press("{LShiftKey down}{Tab}{Tab}{Tab}{Tab}{Tab}{LShiftKey up}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Proposal_Type'.", new RecordItemIndex(13));
            Keyboard.Press(Proposal_Type);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(14));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{enter}'.", new RecordItemIndex(15));
            Keyboard.Press("{enter}");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
